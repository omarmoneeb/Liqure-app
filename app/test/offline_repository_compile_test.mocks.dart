// Mocks generated by Mockito 5.4.5 from annotations
// in liquor_journal/test/offline_repository_compile_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:connectivity_plus/connectivity_plus.dart' as _i14;
import 'package:flutter/material.dart' as _i12;
import 'package:liquor_journal/core/database/local/app_database.dart' as _i10;
import 'package:liquor_journal/core/database/local/daos/drink_dao.dart' as _i2;
import 'package:liquor_journal/core/database/local/daos/rating_dao.dart' as _i3;
import 'package:liquor_journal/core/database/local/daos/sync_queue_dao.dart'
    as _i4;
import 'package:liquor_journal/core/database/sync/sync_service.dart' as _i9;
import 'package:liquor_journal/features/tasting/domain/entities/drink.dart'
    as _i7;
import 'package:liquor_journal/features/tasting/domain/entities/rating.dart'
    as _i8;
import 'package:liquor_journal/features/tasting/domain/repositories/drinks_repository.dart'
    as _i11;
import 'package:liquor_journal/features/tasting/domain/repositories/ratings_repository.dart'
    as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDrinkDao_0 extends _i1.SmartFake implements _i2.DrinkDao {
  _FakeDrinkDao_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRatingDao_1 extends _i1.SmartFake implements _i3.RatingDao {
  _FakeRatingDao_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSyncQueueDao_2 extends _i1.SmartFake implements _i4.SyncQueueDao {
  _FakeSyncQueueDao_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_3<T> extends _i1.SmartFake
    implements _i5.StreamController<T> {
  _FakeStreamController_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseExecutor_4 extends _i1.SmartFake
    implements _i6.DatabaseExecutor {
  _FakeDatabaseExecutor_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDrink_5 extends _i1.SmartFake implements _i7.Drink {
  _FakeDrink_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRating_6 extends _i1.SmartFake implements _i8.Rating {
  _FakeRating_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSyncStatus_7 extends _i1.SmartFake implements _i9.SyncStatus {
  _FakeSyncStatus_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i10.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DrinkDao get drinkDao => (super.noSuchMethod(
        Invocation.getter(#drinkDao),
        returnValue: _FakeDrinkDao_0(
          this,
          Invocation.getter(#drinkDao),
        ),
      ) as _i2.DrinkDao);

  @override
  _i3.RatingDao get ratingDao => (super.noSuchMethod(
        Invocation.getter(#ratingDao),
        returnValue: _FakeRatingDao_1(
          this,
          Invocation.getter(#ratingDao),
        ),
      ) as _i3.RatingDao);

  @override
  _i4.SyncQueueDao get syncQueueDao => (super.noSuchMethod(
        Invocation.getter(#syncQueueDao),
        returnValue: _FakeSyncQueueDao_2(
          this,
          Invocation.getter(#syncQueueDao),
        ),
      ) as _i4.SyncQueueDao);

  @override
  _i5.StreamController<String> get changeListener => (super.noSuchMethod(
        Invocation.getter(#changeListener),
        returnValue: _FakeStreamController_3<String>(
          this,
          Invocation.getter(#changeListener),
        ),
      ) as _i5.StreamController<String>);

  @override
  set changeListener(_i5.StreamController<String>? _changeListener) =>
      super.noSuchMethod(
        Invocation.setter(
          #changeListener,
          _changeListener,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.DatabaseExecutor get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseExecutor_4(
          this,
          Invocation.getter(#database),
        ),
      ) as _i6.DatabaseExecutor);

  @override
  set database(_i6.DatabaseExecutor? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [DrinksRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDrinksRepository extends _i1.Mock implements _i11.DrinksRepository {
  MockDrinksRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i7.Drink>> getDrinks({
    String? search,
    _i7.DrinkType? type,
    int? page,
    int? perPage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDrinks,
          [],
          {
            #search: search,
            #type: type,
            #page: page,
            #perPage: perPage,
          },
        ),
        returnValue: _i5.Future<List<_i7.Drink>>.value(<_i7.Drink>[]),
      ) as _i5.Future<List<_i7.Drink>>);

  @override
  _i5.Future<List<_i7.Drink>> getDrinksWithFilter(dynamic filter) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDrinksWithFilter,
          [filter],
        ),
        returnValue: _i5.Future<List<_i7.Drink>>.value(<_i7.Drink>[]),
      ) as _i5.Future<List<_i7.Drink>>);

  @override
  _i5.Future<_i7.Drink?> getDrinkById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getDrinkById,
          [id],
        ),
        returnValue: _i5.Future<_i7.Drink?>.value(),
      ) as _i5.Future<_i7.Drink?>);

  @override
  _i5.Future<_i7.Drink?> getDrinkByBarcode(String? barcode) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDrinkByBarcode,
          [barcode],
        ),
        returnValue: _i5.Future<_i7.Drink?>.value(),
      ) as _i5.Future<_i7.Drink?>);

  @override
  _i5.Future<_i7.Drink> createDrink(_i7.Drink? drink) => (super.noSuchMethod(
        Invocation.method(
          #createDrink,
          [drink],
        ),
        returnValue: _i5.Future<_i7.Drink>.value(_FakeDrink_5(
          this,
          Invocation.method(
            #createDrink,
            [drink],
          ),
        )),
      ) as _i5.Future<_i7.Drink>);

  @override
  _i5.Future<_i7.Drink> updateDrink(_i7.Drink? drink) => (super.noSuchMethod(
        Invocation.method(
          #updateDrink,
          [drink],
        ),
        returnValue: _i5.Future<_i7.Drink>.value(_FakeDrink_5(
          this,
          Invocation.method(
            #updateDrink,
            [drink],
          ),
        )),
      ) as _i5.Future<_i7.Drink>);

  @override
  _i5.Future<void> deleteDrink(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteDrink,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i7.Drink>> getPopularDrinks({int? limit = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularDrinks,
          [],
          {#limit: limit},
        ),
        returnValue: _i5.Future<List<_i7.Drink>>.value(<_i7.Drink>[]),
      ) as _i5.Future<List<_i7.Drink>>);

  @override
  _i5.Future<List<_i7.Drink>> getRecentDrinks({int? limit = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentDrinks,
          [],
          {#limit: limit},
        ),
        returnValue: _i5.Future<List<_i7.Drink>>.value(<_i7.Drink>[]),
      ) as _i5.Future<List<_i7.Drink>>);

  @override
  _i5.Future<Map<String, _i7.Drink>> getBatchDrinks(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBatchDrinks,
          [ids],
        ),
        returnValue:
            _i5.Future<Map<String, _i7.Drink>>.value(<String, _i7.Drink>{}),
      ) as _i5.Future<Map<String, _i7.Drink>>);

  @override
  _i5.Future<List<Map<String, dynamic>>> getDrinksWithStats({
    List<String>? drinkIds,
    String? userId,
    _i7.DrinkType? type,
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDrinksWithStats,
          [],
          {
            #drinkIds: drinkIds,
            #userId: userId,
            #type: type,
            #limit: limit,
          },
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);

  @override
  _i5.Future<Map<String, dynamic>> getDrinkAggregateStats({
    List<String>? drinkIds,
    String? userId,
    _i12.DateTimeRange<DateTime>? dateRange,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDrinkAggregateStats,
          [],
          {
            #drinkIds: drinkIds,
            #userId: userId,
            #dateRange: dateRange,
          },
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);
}

/// A class which mocks [RatingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRatingsRepository extends _i1.Mock implements _i13.RatingsRepository {
  MockRatingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i8.Rating>> getUserRatings(
    String? userId, {
    int? page,
    int? perPage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserRatings,
          [userId],
          {
            #page: page,
            #perPage: perPage,
          },
        ),
        returnValue: _i5.Future<List<_i8.Rating>>.value(<_i8.Rating>[]),
      ) as _i5.Future<List<_i8.Rating>>);

  @override
  _i5.Future<List<_i8.Rating>> getDrinkRatings(String? drinkId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDrinkRatings,
          [drinkId],
        ),
        returnValue: _i5.Future<List<_i8.Rating>>.value(<_i8.Rating>[]),
      ) as _i5.Future<List<_i8.Rating>>);

  @override
  _i5.Future<_i8.Rating?> getRatingById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getRatingById,
          [id],
        ),
        returnValue: _i5.Future<_i8.Rating?>.value(),
      ) as _i5.Future<_i8.Rating?>);

  @override
  _i5.Future<_i8.Rating?> getUserDrinkRating(
    String? userId,
    String? drinkId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserDrinkRating,
          [
            userId,
            drinkId,
          ],
        ),
        returnValue: _i5.Future<_i8.Rating?>.value(),
      ) as _i5.Future<_i8.Rating?>);

  @override
  _i5.Future<_i8.Rating> createRating(_i8.Rating? rating) =>
      (super.noSuchMethod(
        Invocation.method(
          #createRating,
          [rating],
        ),
        returnValue: _i5.Future<_i8.Rating>.value(_FakeRating_6(
          this,
          Invocation.method(
            #createRating,
            [rating],
          ),
        )),
      ) as _i5.Future<_i8.Rating>);

  @override
  _i5.Future<_i8.Rating> updateRating(_i8.Rating? rating) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRating,
          [rating],
        ),
        returnValue: _i5.Future<_i8.Rating>.value(_FakeRating_6(
          this,
          Invocation.method(
            #updateRating,
            [rating],
          ),
        )),
      ) as _i5.Future<_i8.Rating>);

  @override
  _i5.Future<void> deleteRating(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteRating,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<double?> getDrinkAverageRating(String? drinkId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDrinkAverageRating,
          [drinkId],
        ),
        returnValue: _i5.Future<double?>.value(),
      ) as _i5.Future<double?>);

  @override
  _i5.Future<List<_i8.Rating>> getRecentRatings(
    String? userId, {
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentRatings,
          [userId],
          {#limit: limit},
        ),
        returnValue: _i5.Future<List<_i8.Rating>>.value(<_i8.Rating>[]),
      ) as _i5.Future<List<_i8.Rating>>);

  @override
  _i5.Future<Map<String, dynamic>> getUserRatingStats(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserRatingStats,
          [userId],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<Map<String, dynamic>> getUserAggregateStats(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserAggregateStats,
          [userId],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<Map<String, Map<String, dynamic>>> getBatchDrinkStats(
          List<String>? drinkIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBatchDrinkStats,
          [drinkIds],
        ),
        returnValue: _i5.Future<Map<String, Map<String, dynamic>>>.value(
            <String, Map<String, dynamic>>{}),
      ) as _i5.Future<Map<String, Map<String, dynamic>>>);

  @override
  _i5.Future<List<Map<String, dynamic>>> getRatingsWithDrinkDetails(
    String? userId, {
    int? limit,
    String? orderBy,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRatingsWithDrinkDetails,
          [userId],
          {
            #limit: limit,
            #orderBy: orderBy,
          },
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);

  @override
  _i5.Future<List<Map<String, dynamic>>> getRatingTimeSeries(
    String? userId, {
    DateTime? startDate,
    DateTime? endDate,
    String? groupBy,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRatingTimeSeries,
          [userId],
          {
            #startDate: startDate,
            #endDate: endDate,
            #groupBy: groupBy,
          },
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);

  @override
  _i5.Future<Map<String, dynamic>> getRatingAnalytics(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRatingAnalytics,
          [userId],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);
}

/// A class which mocks [SyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncService extends _i1.Mock implements _i9.SyncService {
  MockSyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> forceSync() => (super.noSuchMethod(
        Invocation.method(
          #forceSync,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> isOnline() => (super.noSuchMethod(
        Invocation.method(
          #isOnline,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i9.SyncStatus> getSyncStatus() => (super.noSuchMethod(
        Invocation.method(
          #getSyncStatus,
          [],
        ),
        returnValue: _i5.Future<_i9.SyncStatus>.value(_FakeSyncStatus_7(
          this,
          Invocation.method(
            #getSyncStatus,
            [],
          ),
        )),
      ) as _i5.Future<_i9.SyncStatus>);

  @override
  _i5.Future<void> queueDrinkSync(
    String? drinkId,
    String? operation, [
    Map<String, dynamic>? payload,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #queueDrinkSync,
          [
            drinkId,
            operation,
            payload,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> queueRatingSync(
    String? ratingId,
    String? operation, [
    Map<String, dynamic>? payload,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #queueRatingSync,
          [
            ratingId,
            operation,
            payload,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> cleanup() => (super.noSuchMethod(
        Invocation.method(
          #cleanup,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i14.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i14.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i5.Stream<_i14.ConnectivityResult>.empty(),
      ) as _i5.Stream<_i14.ConnectivityResult>);

  @override
  _i5.Future<_i14.ConnectivityResult> checkConnectivity() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i5.Future<_i14.ConnectivityResult>.value(
            _i14.ConnectivityResult.bluetooth),
      ) as _i5.Future<_i14.ConnectivityResult>);
}
